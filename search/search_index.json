{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"MAD-1 Notes","text":""},{"location":"#for-iitm-bs-degree","title":"For IITM BS Degree","text":""},{"location":"#important-resources-for-this-course","title":"Important resources for this course.","text":"<p>Bug</p> <p>If you find a formatting issue in displaying math equations, kindly refresh the page. This is a bug and I am working on it. Hope to remove it soon.</p>"},{"location":"02%20What%20is%20an%20App%3F/","title":"What is an \"App\"?","text":"<p>An app, which is short for \"application,\" is a type of software that can be installed and run on a computer, tablet, smartphone or other electronic devices. An app most frequently refers to a mobile application or a piece of software that is installed and used on a computer. Most apps have a specific and narrow function. - Wikipedia</p>"},{"location":"02%20What%20is%20an%20App%3F/#types-of-app","title":"Types of App","text":""},{"location":"02%20What%20is%20an%20App%3F/#based-on-platforms","title":"Based on platforms","text":""},{"location":"02%20What%20is%20an%20App%3F/#desktop-apps","title":"Desktop Apps","text":"<ul> <li>Apps are usually standalone.</li> <li>Most of them works offline.</li> <li>Based on OS specific SDKs(Software Development Kit).</li> </ul>"},{"location":"02%20What%20is%20an%20App%3F/#mobile-apps","title":"Mobile Apps","text":"<ul> <li>Targeted at mobile platforms - Mobiles/Tablets.</li> <li>Mostly needs network connectivity.</li> <li>Can be cross-platform.</li> <li>Not as powerful as desktop apps due to hardware limitations.</li> </ul>"},{"location":"02%20What%20is%20an%20App%3F/#web-apps","title":"Web Apps","text":"<ul> <li>The only thing you need to run them is just \"a browser\".</li> <li>Works across all OS and platforms.</li> <li>Heavily network oriented.</li> </ul> <p>Our main focus of this course is on Web apps.</p>"},{"location":"03%20Components%20of%20an%20Application/","title":"Components of an \"Application\"","text":"<p>Each app boils down to the usage of three components, namely,</p> <ul> <li>Frontend - UI/UX or presentation of app</li> <li>Computations or server-side logic</li> <li>Storage</li> </ul>"},{"location":"03%20Components%20of%20an%20Application/#example-email-client","title":"Example: Email Client","text":"<p>Frontend: Displays the list of emails along with their content.</p> <p>Computations: Searching an email or indexing them.</p> <p>Storage: Every email is stored somewhere either locally or on server.</p>"},{"location":"04%20Architectures%20of%20Platforms/","title":"Architectures of Platforms.","text":"<p>For web apps, an architecture means how are devices connected over the network.</p> <p>There are mainly two types of web apps namely,</p> <ul> <li>Client-Server Architecture</li> <li>Peer-2-Peer Architecture</li> </ul>"},{"location":"04%20Architectures%20of%20Platforms/#client-server-architecture","title":"Client Server Architecture","text":"<ul> <li>There is an explicit difference between the server and the client</li> <li>Machine clients are also available that do not need a user interaction to perform its task.</li> <li> <p>There are several other variants of this architecture, i.e., multiple server, multiple client, multiple queue, etc.</p> </li> <li> <p>Examples: Emails, Messaging Apps, etc.</p> </li> </ul> <p>A pictoral representation of client-server architecture is given below.</p> <p> </p> Client Server Model"},{"location":"04%20Architectures%20of%20Platforms/#peer-to-peer-architecture-p2p-model","title":"Peer to Peer Architecture (P2P Model)","text":"<ul> <li>All the devices connected to P2P are given same priority but some peers marked by masters are given higher priority.</li> <li>There are not owners of the network but masters or moderators are always present.</li> <li>The files are still encrypted with keys to only the owner.</li> <li>The information is shared.</li> <li>Examples: Web-3, Torrent Clients, IPFS, etc.</li> </ul> <p>A pictoral representation of peer-2-peer architecture is given below.</p> <p> </p> P2P Model"},{"location":"05%20Architectures%20of%20Software/","title":"Software Architecture Patterns","text":""},{"location":"05%20Architectures%20of%20Software/#what-is-a-design-pattern","title":"What is a design pattern?","text":"<p>\"In software engineering, a design pattern is a general repeatable solution to a commonly occurring problem in software design.\".</p> <ul> <li>Senior developers observe a \"pattern\" in the code and helps the juniors to get their hands-on to the pattern so that the code becomes cleaner and efficient.</li> </ul>"},{"location":"05%20Architectures%20of%20Software/#mvc-paradigm-model-view-controller-paradigm","title":"MVC Paradigm (Model-View-Controller Paradigm)","text":"<ul> <li>Model: The core data stored for the application, e.g., databases.</li> <li>View: The front-end for your application that the user uses.</li> <li>Controller: The manipulation of data.</li> </ul> <p>User uses the controller to manipulate model that updates view.</p> <ul> <li>Example:</li> </ul>    ![Email MVC](assets/MVC-Paradigm.png)   MVC Paradigm when using Email Client"},{"location":"12%20MVC/","title":"More about Views in MVC","text":"<p>Read more about MVC</p>"},{"location":"12%20MVC/#views-and-user-interfaces","title":"Views and User Interfaces","text":"<p>A View consists of two components:</p> <ul> <li>User Interfaces</li> <li>User Interaction</li> </ul>"},{"location":"12%20MVC/#user-interfaces","title":"User Interfaces","text":""},{"location":"12%20MVC/#overview","title":"Overview","text":"<p>User Interfaces are the design for interactions with the users. The goals of a good user interface are:</p> <ul> <li>The interface should be simple, i.e., easy for user to handle and understand.</li> <li>The interface should be efficient.</li> <li>The interface should be accessible to most of the users, i.e., it has some features for users with visual impairments, hearing impairments and so on.</li> <li>(Optional) The interface should be asthetically pleasing. The interface should not be filles with many colours or fonts. It should be simple and elegant.</li> </ul> <p>Tip</p> <p>A great article on guidelines for design: Ten Usabilty Heuristics</p>"},{"location":"12%20MVC/#creating-a-good-ui","title":"Creating a good UI","text":"<p>To create a good user interface, the following approach can be used:</p> <ul> <li>Step 1: Understand what are the needs for the potential client that will use the interface.</li> <li>Step 2: Create a prototype interface and present them to your clients.</li> <li>Step 3: After the approval of prototype, the interface should be given out to a small set of potential users for testing, that return feedback.</li> </ul>"},{"location":"12%20MVC/#examples","title":"Examples","text":"<p>User Interfaces can be of many kinds. A few of them may be:</p> <ul> <li>Screen</li> <li>Audio</li> <li>Haptic feedback</li> <li>and so on....</li> </ul>"},{"location":"12%20MVC/#user-interactions","title":"User Interactions","text":"<p>The devices through which a user can interact with the application are called user interaction devices.</p> <p>They can be of many types. Some examples are:</p> <ul> <li>Keyboard/Mouse</li> <li>Audio Inputs</li> <li>Motor Inputs</li> <li>Custom Buttons</li> </ul> <p>The user interactions are largely determined by hardware constraints. For e.g., you cannot access a desktop game that requires a mouse or keyboard on your mobile phone. To overcome this, User-Agent information can be used.</p>"},{"location":"12%20MVC/#types-of-views","title":"Types of Views","text":"<p>There are many kinds of views:</p> <ul> <li>Fully Static Web Pages: These pages are completely static and do not require any computations on the client side. For example, the about us page on any website.</li> <li>Partially Dynamic Web Pages: These pages are partially dynamic and require some computations on the client side. For example, a blog which needs to fetch the posts but the headers and footers are static.</li> <li>Mostly Dynamic Web Pages: These pages are mostly dynamic and require a lot of computations on the client side. For example, an ecommerce app.</li> </ul>"},{"location":"TODO/","title":"TODO","text":""},{"location":"TODO/#add","title":"ADD","text":"<ul> <li>Week-2 (6 lectures)</li> </ul>"},{"location":"Basic%20terminologies%20of%20Web/01%20Introduction%20to%20Web/","title":"Introduction to the Web","text":""},{"location":"Basic%20terminologies%20of%20Web/01%20Introduction%20to%20Web/#why-the-web","title":"Why The \"Web\"?","text":"<ul> <li>The course is completely based on the web.</li> <li>The \"web\" is a generic platforms and works across multiple OS and platforms.</li> <li>Built on sound underlying principles.</li> <li>The \"web\" is worth understanding as the web is rapidly developing.</li> <li>Constraints of the web.</li> <li>Costs: Storage, Network and so on.</li> </ul>"},{"location":"Basic%20terminologies%20of%20Web/01%20Introduction%20to%20Web/#history-of-internet","title":"History of Internet","text":""},{"location":"Basic%20terminologies%20of%20Web/01%20Introduction%20to%20Web/#1890-telephone-networks","title":"<code>1890+</code>: Telephone Networks","text":"<ul> <li>Physical wires tied up for duration of call even if no one speaks.</li> </ul>"},{"location":"Basic%20terminologies%20of%20Web/01%20Introduction%20to%20Web/#1960-packet-switched-networks","title":"<code>1960</code>: Packet switched networks","text":"<ul> <li>Wires occupied when only in use.</li> <li>Data transferred instead of voice</li> </ul>"},{"location":"Basic%20terminologies%20of%20Web/01%20Introduction%20to%20Web/#1969-arpanet","title":"<code>1969</code>: ARPANet","text":"<ul> <li>Node-to-Node network</li> </ul>"},{"location":"Basic%20terminologies%20of%20Web/01%20Introduction%20to%20Web/#protocols","title":"Protocols","text":"<ul> <li>Answers the question: How to format packets?</li> <li>Each network has its own protocol.</li> </ul>"},{"location":"Basic%20terminologies%20of%20Web/01%20Introduction%20to%20Web/#inter-network","title":"\"Inter\" Network","text":"<ul> <li>Answers the question: How to communicate within different protocols?</li> <li>Alternatively, replace each protocol with \"Inter\" Network protocol.</li> </ul>"},{"location":"Basic%20terminologies%20of%20Web/01%20Introduction%20to%20Web/#1983-ipinternet-protocol","title":"<code>1983</code>: IP(Internet Protocol)","text":"<ul> <li>Defines headers, packet types, interpretation</li> </ul>"},{"location":"Basic%20terminologies%20of%20Web/01%20Introduction%20to%20Web/#1983-tcptransmission-control-protocol","title":"<code>1983</code>: TCP(Transmission Control Protocol)","text":"<ul> <li>Establishes reliable communications - retry, error control</li> <li>Automatically scale and adjust to network limit</li> </ul>"},{"location":"Basic%20terminologies%20of%20Web/01%20Introduction%20to%20Web/#1985-domain-name","title":"<code>1985</code>: Domain name","text":"<ul> <li>Uses names instead of IP addresses.</li> <li>Revolutionary</li> </ul>"},{"location":"Basic%20terminologies%20of%20Web/01%20Introduction%20to%20Web/#1989-hypertext","title":"<code>1989+</code>: HyperText","text":"<ul> <li>Serving text documents on the web</li> <li>Formatting hints inside document served to \"link\" to other text documents.</li> <li>Lead to the development of HTML, i.e. <code>Hyper Text Markup Language</code></li> </ul> <p> All this lead to the development of \"The World Wide Web\". </p>"},{"location":"Basic%20terminologies%20of%20Web/01%20Introduction%20to%20Web/#advancements-in-the-web","title":"Advancements in \"The Web\"","text":""},{"location":"Basic%20terminologies%20of%20Web/01%20Introduction%20to%20Web/#original-web-and-its-limitations","title":"Original Web and its Limitations","text":"<ul> <li>Static pages</li> <li>Limited Styling</li> <li>Browser compatibility Issue</li> <li>Complicated executable interfaces</li> </ul>"},{"location":"Basic%20terminologies%20of%20Web/01%20Introduction%20to%20Web/#2004-web-20","title":"<code>2004+</code>: Web 2.0","text":"<ul> <li>Generate dynamic pages</li> <li>HTTP was now used as a transport mechanism rather than a transport protocol.</li> <li>Computation was now performed on the client side</li> <li>platform agnostic operating system</li> </ul>"},{"location":"Basic%20terminologies%20of%20Web/02%20How%20does%20the%20web%20works%3F/","title":"How does the Web works?","text":""},{"location":"Basic%20terminologies%20of%20Web/03%20Peformance%20of%20a%20site/","title":"Performance of a site","text":""},{"location":"Basic%20terminologies%20of%20Web/03%20Peformance%20of%20a%20site/#latency","title":"Latency","text":""}]}